데이터 베이스 환경.


- 정보와 데이터
	1. 의사결정(decision-making)

	      - 인간이 영위하는 중요한 지능 활동 중의 하나
	      
	      - 일상생활을 위해 취해야 될 단순한 동작을 위한 결정 ~ 한 조직의 존폐에 중대한 영향을 미치는 영역.

	      - 최신의 정확한 정보로부터 상황 파악 필요
	
	2. 데이터(Data)
	      
              - 현실 세계로부터 관찰이나 측정을 통해 얻어지는 사실이나 값.  
	    	
		ex) 3.14(데이터) -> 원주율(정보) -> 원의 둘레,비율 (정보)
		
	3. 정보(Information) **중요.
	      
	      - 어떤 상황에 대한 적절한 결정을 할 수 있게 하는 지식
	      
	      - 데이터의 유효한 해석이나 데이터 상호간의 관계
	      
	      - 데이터를 처리해서 얻어진 결과
	      
	      - I = P(D)
	      
  	      - Information = Processor(Data)

데이터베이스 서버

	1. 데이터베이스

		- 어느 한 조직의 여러 응용 시스템들이 공용할 수 있도록 통합,저장된 운영 데이터의 집합

	2. 데이터베이스의 특징

		1. 통합 데이터
		
		        - 원칙적으로 데이터가 중복되지 않음
			
			- 최소의 중복

			- 통제된 중복

		2. 저장 데이터
			
			- 컴퓨터가 접근 가능한 저장 매체에 저장
		
		3. 운영 데이터
			
			- 한 조직의 고유 기능을 수행하기 위해 반드시 필요한 데이터

		4. 공용 데이터
			- 한 조직의 여러 응용 프로그램이 공동으로 소유,유지,이용하는 데이터



	3. 데이터베이스의 특성

		1. Real-time accessibility(실시간 접근성)

			- Query(정의) 에 대하여 실시간 처리로 응답할 수 있어야한다.

			- 생성된 정보가 처리되어 다음 의사 결정에 바로 반영한다.

		2. Continuous evolution (계속적인 변화)

			- Dynamic state by insert,delete,update

			- 새로운 데이터의 삽입,삭제,갱신으로 항상 그 내용이 변할 뿐 아니라 이러한 변화 속에서 현재의 정확한 데이터를 유지해야한다.

		3. Concurrent charing(동시 공용)

			- 여러 사용자가 동시에 사용 가능

			- Not serial,But concurrent(직렬적이진 않지만, 동시에 공용할 수 있도록 지원한다.)

		4. Contents reference(내용에 의한 참조)

			- 위치나 주소가 아닌 값에 따라 참조

			- 사용자가 참조하기 원하는 데이터의 조건을 제시하면, 이조건을 만족하는 모든 레코드를 위치에 관계없이 하나의 논리적 단위로 취급하여 데이터베이스에 접근한다.
		


	4. 데이터베이스의 구성요소

		1. Logical(Conceptual) 구성요소

			- 사용자 측면에서 개체(Entity)와 관계(Relationship)으로 구성

		2. Entity(개체)

			- 데이터베이스에 표현하려고 하는 유형,무형의 객체(Object)로써 구분되는것

			- 현실 세계에 대해 사람이 생각하는 개념이나 정보의 단위로써 의미를 가짐 => 객체

			- 단독으로 존재할 수 있다. / 정보로써의 역할을 한다.

			- 하나의 Entity(개체)는 하나 이상의속성(attribute)로 구성

			- 속성(attribute) - Entity(개체)의 특성이나 상태,데이터의 가장 작은 논리적 단위

			- 'entity instance' vs 'entity type'

			- entity set - entity instance의 집합

	5. Relationship(관계)
		
		- Entity 집합과 Entity 집합 간에는 여러 가지 유형의 관계(Relationship)가 존재
	
		- 데이터베이스에 저장해야 할 대상

		- 관계는 개체들을 서로 연관시켜 어떤 의미를 나타내어 개체와 다름이 없기 때문

		- 관계는 보통 무형적이고 다루기 아주 복잡하다는 의미에서 별개의 요소로 취급

		- 속성 관계 (attribute relationship)

			- 하나의 Entity 내에서만 존재하기 때문에 개체 내 관계 (intra-entity relationship)
			
			- 묵시적으로 취급

		- 개체 관계(entity relationship)

			- 개체 외부에 존재하기 때문에 개체 간 관계(inter-entity relationship)
			
			- 개체 관계만 명시적으로 취급





클라이언트/ 서버 모델

	1. 클라이언트/서버(Client/Server)모델

		- 데이터를 저장하고 관리하는 서버 부분과 해당 서버에 접속하여 데이터를 열람하는 클라이언트 부분으로 구성된 네트워크 구조

		- 서버:클라이언트 = 1:N (요즘은 M:N)

		- 서버
			- Web Server : HTML로 만든 웹페이지가 들어있는 파일을 사용자에게 제공하는 서버
			- ex) 아파치(Apache)

			- WAS:Web Application Server, 자바(Java)등으로 만든 웹 응용 프로그램이 설치되어 작동하는 웹 애플리케이션 서버

			- 데이터베이스 서버 : Database Server, 데이터베이스(DB)를 저장 및 관리하는 서버, DBMS







ＤＢＭＳ

	１．ＤＢＭＳ（Database Management System)이란?

		- 응용 프로그램과 데이터의 중재자로서 모든 응용 프로그램들이 데이터베이스를 공용할 수 있게끔 관리 해주는 소프트웨어 시스템

		- DBMS는 데이터베이스의 구성,접근 방법,관리 유지에 대한 모든 책임을 가진다.

	


D B M S 의 필수 기능
	
	1. DBMS의 필수 기능

		- Data Definition(정의 기능)

			- 하나의 저장 구조로 여러 사용자의 요구를 지원할 수 있도록 데이터를 조직하는 기능

			- 저의 기능 요건

				- 데이터의 논리적 구조를 명세

				- 데이터의 물리적 구조를 명세

				- 물리적/논리적 Mapping(사상)명세

 		- Data Manipulation(조작 기능)

			- 사용자 - 데이터베이스 간의 인터페이스

			- 체계적 데이터 처리 지원 능력(검색,갱신,삽입,삭제)

			- 조작 기능의 요건

				- 사용이 쉽고 자연스러운 도구

				- 원하는 연산의 명세 가능

				- 효율적인 접근 

		- Data Control ( 제어기능)

			- 데이터의 정확성과 보안성을 유지하는 기능

			- 제어 기능의 요건

				- 무결성(integrity)유지
					
					데이터베이스를 접근하는 갱신,삽입,삭제 작업이 정확하게 수행되게 하여 데이터의 무결성이 파괴되지 않도록 제어할 수 있어야한다.

				- 보안,검사 권한
					
					정당한 사용자가 허가된 데이터만을 접근할 수 있도록 보장하기 위하여 권한(authority)을 검사하고 보안(security)을 유지할 수 있어야한다.

				- 병행 수행 제어
					
					여러 사용자가 데이터베이스를 동시에 접근하여 데이터를 처리하더라도 데이터베이스와 처리 결과는 항상 정확성이 유지되도록 병행 제여ㅓ 기능을 가지고 있어야한다.

					개발에서 굉장히 고민을 많이하고 구성해야 하는 부분.

	2. DBMS의 장점

		- 데이터 중복(redundancy)의 최소화 - controlled redundancy

		- 데이터의 공용(sharing)

		- 데이터의 일관성(consistency)유지

		- 데이터의 무결성(integrity)유지

		- 데이터의 보안(security)보장

		- 표준화 용이

		- 전체 데이터의 요구의 조정: 상충되는 데이터가 있는 경우

	3. DBMS의 단점

		- 운영비 증대

		- 특정 응용 프로그램의 복잡화: 서로 연관된 데이터의 처리

		- 복잡한 백업과 회복

		- 시스템의 취약성





SQL

	- DBMS 와 대화를 하기 위한 도구

	- RDBMS (Relational Database Management System)을 조작할 때 사용

	- DML (Data Manipulation Language)

		- 데이터 베이스에서 새롭게 데이터를 추가,삭제,갱신 등 데이터를 조작할 때 사용

		- insert,delete,update | select (DDL 과 DCL이 구축된후 이것들로만 거의 하게 구축된다.)

	- DDL (Data Manipulation Language)

		- 데이터를 정의하는 명령어.

		- create,drop (조심해서 써야함),alter(조심해서 써야함)

	- DCL (Data Control Language)

		- 데이터를 제어하는 명령어 

		- 트랜잭션 제어, 데이터 접근권한 제어 명령 포함




	명사 / 동사
	
	* 명사를 통해서 Entity, Attribute를 구분
	* 동사를 통해서 Relationship 또는 처리 방법 등을 파악
		- 동사를 통해서 구부노디는 내용
		     1) 데이터베이스 관점 -> Relationship
		     2) Application Server -> Method ( Business Logic)















